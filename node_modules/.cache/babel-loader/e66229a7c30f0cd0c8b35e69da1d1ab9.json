{"ast":null,"code":"import _regeneratorRuntime from \"/home/grazvydas/Downloads/memeFrontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/grazvydas/Downloads/memeFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/grazvydas/Downloads/memeFrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/grazvydas/Downloads/memeFrontend/src/index.tsx\";\n// Import React, react-dom & dom-to-image-more\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport domtoimage from 'dom-to-image-more';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import components\n\nimport Content from './components/content';\nimport Form from './components/form';\nimport Result from './components/result'; // Import styles\n\nimport './styles/styles.css'; // App component\n\nfunction App() {\n  // Create refs\n  var contentContainerRef = React.useRef(null);\n  var resultContainerRef = React.useRef(null);\n\n  var _React$useState = React.useState({\n    url: ''\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      image = _React$useState2[0],\n      setImage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeImage = _React$useState4[0],\n      setActiveImage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      textTop = _React$useState6[0],\n      setTextTop = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      textBottom = _React$useState8[0],\n      setTextBottom = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      isMemeGenerated = _React$useState10[0],\n      setIsMemeGenerated = _React$useState10[1];\n\n  function fetchImage() {\n    return _fetchImage.apply(this, arguments);\n  } // Handle input elements\n\n\n  function _fetchImage() {\n    _fetchImage = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setImage;\n              _context.next = 3;\n              return axios.get('http://localhost:3100/makememe').then(function (response) {\n                var returnedData = response.data;\n                return returnedData.image;\n              }, function (error) {\n                console.log(error);\n              });\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              setActiveImage(image.url);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchImage.apply(this, arguments);\n  }\n\n  function handleInputChange(event) {\n    if (event.target.name === 'text-top') {\n      // Update textTop state\n      setTextTop(event.target.value);\n    } else {\n      // Update textBottom state\n      setTextBottom(event.target.value);\n    }\n  } // Choose random images from images fetched from api.imgflip.com\n\n\n  function handleImageChange() {\n    // Choose random image\n    //const image = images[Math.floor(Math.random() * images.length)]\n    // Update activeImage state\n    fetchImage();\n  } // Handle image upload via file input\n\n\n  function handleImageInputChange(event) {\n    // Update activeImage state\n    setActiveImage(window.URL.createObjectURL(event.target.files[0]));\n  } // Handle meme generation\n\n\n  function handleMemeGeneration() {\n    // Remove any existing images\n    if (resultContainerRef.current.childNodes.length > 0) {\n      resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0]);\n    } // Generate meme image from the content of 'content' div\n\n\n    domtoimage.toPng(contentContainerRef.current).then(function (dataUrl) {\n      // Create new image\n      var img = new Image(); // Use url of the generated image as src\n\n      img.src = dataUrl;\n      resultContainerRef.current.appendChild(img); // Update state for isMemeGenerated\n\n      setIsMemeGenerated(true);\n    });\n  } // Handle resetting the meme generator/removing existing pictures\n\n\n  function handleMemeReset() {\n    // Remove existing child node inside result container (generated meme image)\n    resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0]); // Update state for isMemeGenerated\n\n    setIsMemeGenerated(false);\n  } // Fetch images from https://api.imgflip.com/get_memes when app mounts\n\n\n  React.useEffect(function () {\n    // Call fetchImage method\n    fetchImage();\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Form, {\n    textTop: textTop,\n    textBottom: textBottom,\n    handleImageInputChange: handleImageInputChange,\n    handleInputChange: handleInputChange,\n    handleImageChange: handleImageChange,\n    handleMemeGeneration: handleMemeGeneration,\n    handleMemeReset: handleMemeReset,\n    isMemeGenerated: isMemeGenerated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(Content, {\n    activeImage: activeImage,\n    contentContainerRef: contentContainerRef,\n    textBottom: textBottom,\n    textTop: textTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }), React.createElement(Result, {\n    resultContainerRef: resultContainerRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }));\n} // Render the App in the DOM\n\n\nvar rootElement = document.getElementById('root');\nrender(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 134\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/grazvydas/Downloads/memeFrontend/src/index.tsx"],"names":["React","render","domtoimage","axios","Content","Form","Result","App","contentContainerRef","useRef","resultContainerRef","useState","url","image","setImage","activeImage","setActiveImage","textTop","setTextTop","textBottom","setTextBottom","isMemeGenerated","setIsMemeGenerated","fetchImage","get","then","response","returnedData","data","error","console","log","handleInputChange","event","target","name","value","handleImageChange","handleImageInputChange","window","URL","createObjectURL","files","handleMemeGeneration","current","childNodes","length","removeChild","toPng","dataUrl","img","Image","src","appendChild","handleMemeReset","useEffect","rootElement","document","getElementById"],"mappings":";;;;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,sCAAP,C,CACA;;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;;AACA,OAAO,qBAAP,C,CAEA;;AACA,SAASC,GAAT,GAAe;AACb;AACA,MAAIC,mBAAmB,GAAGR,KAAK,CAACS,MAAN,CAAiC,IAAjC,CAA1B;AACA,MAAIC,kBAAkB,GAAGV,KAAK,CAACS,MAAN,CAAiC,IAAjC,CAAzB;;AAHa,wBAKYT,KAAK,CAACW,QAAN,CAAe;AAACC,IAAAA,GAAG,EAAC;AAAL,GAAf,CALZ;AAAA;AAAA,MAKNC,KALM;AAAA,MAKAC,QALA;;AAAA,yBAMyBd,KAAK,CAACW,QAAN,CAAe,EAAf,CANzB;AAAA;AAAA,MAMNI,WANM;AAAA,MAMOC,cANP;;AAAA,yBAOiBhB,KAAK,CAACW,QAAN,CAAe,EAAf,CAPjB;AAAA;AAAA,MAONM,OAPM;AAAA,MAOGC,UAPH;;AAAA,yBAQuBlB,KAAK,CAACW,QAAN,CAAe,EAAf,CARvB;AAAA;AAAA,MAQNQ,UARM;AAAA,MAQMC,aARN;;AAAA,yBASiCpB,KAAK,CAACW,QAAN,CAAe,KAAf,CATjC;AAAA;AAAA,MASNU,eATM;AAAA,MASWC,kBATX;;AAAA,WAYEC,UAZF;AAAA;AAAA,IAyBb;;;AAzBa;AAAA;AAAA;AAAA,6BAYb;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEET,QAFF;AAAA;AAAA,qBAEiBX,KAAK,CAACqB,GAAN,CAAU,gCAAV,EACZC,IADY,CACP,UAACC,QAAD,EAAc;AAClB,oBAAMC,YAAY,GAAGD,QAAQ,CAACE,IAA9B;AACA,uBAAOD,YAAY,CAACd,KAApB;AACD,eAJY,EAIV,UAACgB,KAAD,EAAW;AACZC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,eANY,CAFjB;;AAAA;AAAA;AAAA;AASIb,cAAAA,cAAc,CAACH,KAAK,CAACD,GAAP,CAAd;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAZa;AAAA;AAAA;;AA0Bb,WAASoB,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,QAAIA,KAAK,CAACC,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AACpC;AACAjB,MAAAA,UAAU,CAACe,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAV;AACD,KAHD,MAGO;AACL;AACAhB,MAAAA,aAAa,CAACa,KAAK,CAACC,MAAN,CAAaE,KAAd,CAAb;AACD;AACF,GAlCY,CAoCb;;;AACA,WAASC,iBAAT,GAA6B;AAC3B;AACA;AAEA;AACAd,IAAAA,UAAU;AACX,GA3CY,CA6Cb;;;AACA,WAASe,sBAAT,CAAgCL,KAAhC,EAAuC;AACrC;AACAjB,IAAAA,cAAc,CAACuB,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BR,KAAK,CAACC,MAAN,CAAaQ,KAAb,CAAmB,CAAnB,CAA3B,CAAD,CAAd;AACD,GAjDY,CAmDb;;;AACA,WAASC,oBAAT,GAAgC;AAC9B;AACA,QAAIjC,kBAAkB,CAACkC,OAAnB,CAA2BC,UAA3B,CAAsCC,MAAtC,GAA+C,CAAnD,EAAsD;AACpDpC,MAAAA,kBAAkB,CAACkC,OAAnB,CAA2BG,WAA3B,CAAuCrC,kBAAkB,CAACkC,OAAnB,CAA2BC,UAA3B,CAAsC,CAAtC,CAAvC;AACD,KAJ6B,CAM9B;;;AACA3C,IAAAA,UAAU,CAAC8C,KAAX,CAAiBxC,mBAAmB,CAACoC,OAArC,EAA8CnB,IAA9C,CAAmD,UAACwB,OAAD,EAAa;AAC9D;AACA,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ,CAF8D,CAI9D;;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUH,OAAV;AAEAvC,MAAAA,kBAAkB,CAACkC,OAAnB,CAA2BS,WAA3B,CAAuCH,GAAvC,EAP8D,CAS9D;;AACA5B,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,KAXD;AAYD,GAvEY,CAyEb;;;AACA,WAASgC,eAAT,GAA2B;AACzB;AACA5C,IAAAA,kBAAkB,CAACkC,OAAnB,CAA2BG,WAA3B,CAAuCrC,kBAAkB,CAACkC,OAAnB,CAA2BC,UAA3B,CAAsC,CAAtC,CAAvC,EAFyB,CAIzB;;AACAvB,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAhFY,CAkFb;;;AACAtB,EAAAA,KAAK,CAACuD,SAAN,CAAgB,YAAM;AACpB;AACAhC,IAAAA,UAAU;AACX,GAHD,EAGG,EAHH;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAEN,OADX;AAEE,IAAA,UAAU,EAAEE,UAFd;AAGE,IAAA,sBAAsB,EAAEmB,sBAH1B;AAIE,IAAA,iBAAiB,EAAEN,iBAJrB;AAKE,IAAA,iBAAiB,EAAEK,iBALrB;AAME,IAAA,oBAAoB,EAAEM,oBANxB;AAOE,IAAA,eAAe,EAAEW,eAPnB;AAQE,IAAA,eAAe,EAAEjC,eARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAcE,oBAAC,OAAD;AACE,IAAA,WAAW,EAAEN,WADf;AAEE,IAAA,mBAAmB,EAAEP,mBAFvB;AAGE,IAAA,UAAU,EAAEW,UAHd;AAIE,IAAA,OAAO,EAAEF,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,EAsBE,oBAAC,MAAD;AAAQ,IAAA,kBAAkB,EAAEP,kBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF;AA0BD,C,CAED;;;AACA,IAAM8C,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAzD,MAAM,CAAC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAD,EAAUuD,WAAV,CAAN","sourcesContent":["// Import React, react-dom & dom-to-image-more\nimport * as React from 'react'\nimport { render } from 'react-dom'\nimport domtoimage from 'dom-to-image-more'\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// Import components\nimport Content from './components/content'\nimport Form from './components/form'\nimport Result from './components/result'\n\n// Import styles\nimport './styles/styles.css'\n\n// App component\nfunction App() {\n  // Create refs\n  let contentContainerRef = React.useRef<HTMLElement | null>(null)\n  let resultContainerRef = React.useRef<HTMLElement | null>(null)\n\n  const [image,setImage] = React.useState({url:''})\n  const [activeImage, setActiveImage] = React.useState('')\n  const [textTop, setTextTop] = React.useState('')\n  const [textBottom, setTextBottom] = React.useState('')\n  const [isMemeGenerated, setIsMemeGenerated] = React.useState(false)\n\n\n  async function fetchImage() {\n  \n    setImage(await axios.get('http://localhost:3100/makememe')\n      .then((response) => {\n        const returnedData = response.data;\n        return returnedData.image;\n      }, (error) => {\n        console.log(error);\n      }));\n      setActiveImage(image.url)\n\n  }\n\n  // Handle input elements\n  function handleInputChange(event) {\n    if (event.target.name === 'text-top') {\n      // Update textTop state\n      setTextTop(event.target.value)\n    } else {\n      // Update textBottom state\n      setTextBottom(event.target.value)\n    }\n  }\n\n  // Choose random images from images fetched from api.imgflip.com\n  function handleImageChange() {\n    // Choose random image\n    //const image = images[Math.floor(Math.random() * images.length)]\n\n    // Update activeImage state\n    fetchImage();\n  }\n\n  // Handle image upload via file input\n  function handleImageInputChange(event) {\n    // Update activeImage state\n    setActiveImage(window.URL.createObjectURL(event.target.files[0]))\n  }\n\n  // Handle meme generation\n  function handleMemeGeneration() {\n    // Remove any existing images\n    if (resultContainerRef.current.childNodes.length > 0) {\n      resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0])\n    }\n\n    // Generate meme image from the content of 'content' div\n    domtoimage.toPng(contentContainerRef.current).then((dataUrl) => {\n      // Create new image\n      const img = new Image()\n\n      // Use url of the generated image as src\n      img.src = dataUrl\n\n      resultContainerRef.current.appendChild(img)\n\n      // Update state for isMemeGenerated\n      setIsMemeGenerated(true)\n    })\n  }\n\n  // Handle resetting the meme generator/removing existing pictures\n  function handleMemeReset() {\n    // Remove existing child node inside result container (generated meme image)\n    resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0])\n\n    // Update state for isMemeGenerated\n    setIsMemeGenerated(false)\n  }\n\n  // Fetch images from https://api.imgflip.com/get_memes when app mounts\n  React.useEffect(() => {\n    // Call fetchImage method\n    fetchImage()\n  }, [])\n\n  return (\n    <div className=\"container\">\n      {/* Add Form component */}\n      <Form\n        textTop={textTop}\n        textBottom={textBottom}\n        handleImageInputChange={handleImageInputChange}\n        handleInputChange={handleInputChange}\n        handleImageChange={handleImageChange}\n        handleMemeGeneration={handleMemeGeneration}\n        handleMemeReset={handleMemeReset}\n        isMemeGenerated={isMemeGenerated}\n      />\n\n      {/* Add Content component */}\n      <Content\n        activeImage={activeImage}\n        contentContainerRef={contentContainerRef}\n        textBottom={textBottom}\n        textTop={textTop}\n      />\n\n      {/* Add Result component */}\n      <Result resultContainerRef={resultContainerRef} />\n    </div>\n  )\n}\n\n// Render the App in the DOM\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"]},"metadata":{},"sourceType":"module"}