{"ast":null,"code":"import _regeneratorRuntime from \"/home/grazvydas/Downloads/memeFrontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/grazvydas/Downloads/memeFrontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/grazvydas/Downloads/memeFrontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/grazvydas/Downloads/memeFrontend/src/index.tsx\";\n// Import React, react-dom & dom-to-image-more\nimport * as React from 'react';\nimport { render } from 'react-dom';\nimport domtoimage from 'dom-to-image-more';\nimport axios from 'axios'; // Import components\n\nimport Content from './components/content';\nimport Form from './components/form';\nimport Result from './components/result'; // Import styles\n\nimport './styles/styles.css'; // App component\n\nfunction App() {\n  // Create refs\n  var contentContainerRef = React.useRef(null);\n  var resultContainerRef = React.useRef(null); // Create useState hooks\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      images = _React$useState2[0],\n      setImages = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeImage = _React$useState4[0],\n      setActiveImage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(''),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      textTop = _React$useState6[0],\n      setTextTop = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      textBottom = _React$useState8[0],\n      setTextBottom = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      isMemeGenerated = _React$useState10[0],\n      setIsMemeGenerated = _React$useState10[1]; // Fetch images from https://api.imgflip.com/get_memes\n\n\n  function fetchImage() {\n    return _fetchImage.apply(this, arguments);\n  } // Handle input elements\n\n\n  function _fetchImage() {\n    _fetchImage = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _ref, memes;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Get the memes\n              //const imgData = await fetch('https://api.imgflip.com/get_memes').then(res => res.json()).catch(err => console.error(err))\n              axios.post(imgData.data, {\n                Name: 'imgData.data'\n              });\n              _context.next = 3;\n              return imgData.data;\n\n            case 3:\n              _ref = _context.sent;\n              memes = _ref.memes;\n              _context.next = 7;\n              return setImages(memes);\n\n            case 7:\n              _context.next = 9;\n              return setActiveImage(memes[0].url);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _fetchImage.apply(this, arguments);\n  }\n\n  function handleInputChange(event) {\n    if (event.target.name === 'text-top') {\n      // Update textTop state\n      setTextTop(event.target.value);\n    } else {\n      // Update textBottom state\n      setTextBottom(event.target.value);\n    }\n  } // Choose random images from images fetched from api.imgflip.com\n\n\n  function handleImageChange() {\n    // Choose random image\n    var image = images[Math.floor(Math.random() * images.length)]; // Update activeImage state\n\n    setActiveImage(image.url);\n  } // Handle image upload via file input\n\n\n  function handleImageInputChange(event) {\n    // Update activeImage state\n    setActiveImage(window.URL.createObjectURL(event.target.files[0]));\n  } // Handle meme generation\n\n\n  function handleMemeGeneration() {\n    // Remove any existing images\n    if (resultContainerRef.current.childNodes.length > 0) {\n      resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0]);\n    } // Generate meme image from the content of 'content' div\n\n\n    domtoimage.toPng(contentContainerRef.current).then(function (dataUrl) {\n      // Create new image\n      var img = new Image(); // Use url of the generated image as src\n\n      img.src = dataUrl;\n      axios.post('http://localhost:3100/makememe', {\n        firstName: 'Finn',\n        lastName: 'Williams'\n      }).then(function (response) {\n        var returnedData = response.data;\n        console.log(returnedData);\n      }, function (error) {\n        console.log(error);\n      }); // Append new image to DOM\n\n      resultContainerRef.current.appendChild(img); // Update state for isMemeGenerated\n\n      setIsMemeGenerated(true);\n    });\n  } // Handle resetting the meme generator/removing existing pictures\n\n\n  function handleMemeReset() {\n    // Remove existing child node inside result container (generated meme image)\n    resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0]); // Update state for isMemeGenerated\n\n    setIsMemeGenerated(false);\n  } // Fetch images from https://api.imgflip.com/get_memes when app mounts\n\n\n  React.useEffect(function () {\n    // Call fetchImage method\n    fetchImage();\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Form, {\n    textTop: textTop,\n    textBottom: textBottom,\n    handleImageInputChange: handleImageInputChange,\n    handleInputChange: handleInputChange,\n    handleImageChange: handleImageChange,\n    handleMemeGeneration: handleMemeGeneration,\n    handleMemeReset: handleMemeReset,\n    isMemeGenerated: isMemeGenerated,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Content, {\n    activeImage: activeImage,\n    contentContainerRef: contentContainerRef,\n    textBottom: textBottom,\n    textTop: textTop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Result, {\n    resultContainerRef: resultContainerRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }));\n} // Render the App in the DOM\n\n\nvar rootElement = document.getElementById('root');\nrender(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 151\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/grazvydas/Downloads/memeFrontend/src/index.tsx"],"names":["React","render","domtoimage","axios","Content","Form","Result","App","contentContainerRef","useRef","resultContainerRef","useState","images","setImages","activeImage","setActiveImage","textTop","setTextTop","textBottom","setTextBottom","isMemeGenerated","setIsMemeGenerated","fetchImage","post","imgData","data","Name","memes","url","handleInputChange","event","target","name","value","handleImageChange","image","Math","floor","random","length","handleImageInputChange","window","URL","createObjectURL","files","handleMemeGeneration","current","childNodes","removeChild","toPng","then","dataUrl","img","Image","src","firstName","lastName","response","returnedData","console","log","error","appendChild","handleMemeReset","useEffect","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["// Import React, react-dom & dom-to-image-more\nimport * as React from 'react'\nimport { render } from 'react-dom'\nimport domtoimage from 'dom-to-image-more'\nimport axios from 'axios';\n\n// Import components\nimport Content from './components/content'\nimport Form from './components/form'\nimport Result from './components/result'\n\n// Import styles\nimport './styles/styles.css'\n\n// App component\nfunction App() {\n  // Create refs\n  let contentContainerRef = React.useRef<HTMLElement | null>(null)\n  let resultContainerRef = React.useRef<HTMLElement | null>(null)\n\n  // Create useState hooks\n  const [images, setImages] = React.useState([])\n  const [activeImage, setActiveImage] = React.useState('')\n  const [textTop, setTextTop] = React.useState('')\n  const [textBottom, setTextBottom] = React.useState('')\n  const [isMemeGenerated, setIsMemeGenerated] = React.useState(false)\n\n  // Fetch images from https://api.imgflip.com/get_memes\n  async function fetchImage() {\n    // Get the memes\n    //const imgData = await fetch('https://api.imgflip.com/get_memes').then(res => res.json()).catch(err => console.error(err))\n    \n    axios.post(imgData.data, {\n        Name: 'imgData.data'\n      })\n\n    const { memes } = await imgData.data\n\n    // Update images state\n    await setImages(memes)\n\n    // Update activeImage state\n    await setActiveImage(memes[0].url)\n  }\n\n  // Handle input elements\n  function handleInputChange(event) {\n    if (event.target.name === 'text-top') {\n      // Update textTop state\n      setTextTop(event.target.value)\n    } else {\n      // Update textBottom state\n      setTextBottom(event.target.value)\n    }\n  }\n\n  // Choose random images from images fetched from api.imgflip.com\n  function handleImageChange() {\n    // Choose random image\n    const image = images[Math.floor(Math.random() * images.length)]\n\n    // Update activeImage state\n    setActiveImage(image.url)\n  }\n\n  // Handle image upload via file input\n  function handleImageInputChange(event) {\n    // Update activeImage state\n    setActiveImage(window.URL.createObjectURL(event.target.files[0]))\n  }\n\n  // Handle meme generation\n  function handleMemeGeneration() {\n    // Remove any existing images\n    if (resultContainerRef.current.childNodes.length > 0) {\n      resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0])\n    }\n\n    // Generate meme image from the content of 'content' div\n    domtoimage.toPng(contentContainerRef.current).then((dataUrl) => {\n      // Create new image\n      const img = new Image()\n\n      // Use url of the generated image as src\n      img.src = dataUrl\n\n      axios.post('http://localhost:3100/makememe', {\n        firstName: 'Finn',\n        lastName: 'Williams'\n      })\n      .then((response) => {\n        const returnedData = response.data;\n        console.log(returnedData);\n      }, (error) => {\n        console.log(error);\n      });\n\n      // Append new image to DOM\n      resultContainerRef.current.appendChild(img)\n\n      // Update state for isMemeGenerated\n      setIsMemeGenerated(true)\n    })\n  }\n\n  // Handle resetting the meme generator/removing existing pictures\n  function handleMemeReset() {\n    // Remove existing child node inside result container (generated meme image)\n    resultContainerRef.current.removeChild(resultContainerRef.current.childNodes[0])\n\n    // Update state for isMemeGenerated\n    setIsMemeGenerated(false)\n  }\n\n  // Fetch images from https://api.imgflip.com/get_memes when app mounts\n  React.useEffect(() => {\n    // Call fetchImage method\n    fetchImage()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {/* Add Form component */}\n      <Form\n        textTop={textTop}\n        textBottom={textBottom}\n        handleImageInputChange={handleImageInputChange}\n        handleInputChange={handleInputChange}\n        handleImageChange={handleImageChange}\n        handleMemeGeneration={handleMemeGeneration}\n        handleMemeReset={handleMemeReset}\n        isMemeGenerated={isMemeGenerated}\n      />\n\n      {/* Add Content component */}\n      <Content\n        activeImage={activeImage}\n        contentContainerRef={contentContainerRef}\n        textBottom={textBottom}\n        textTop={textTop}\n      />\n\n      {/* Add Result component */}\n      <Result resultContainerRef={resultContainerRef} />\n    </div>\n  )\n}\n\n// Render the App in the DOM\nconst rootElement = document.getElementById('root')\nrender(<App />, rootElement)\n"]},"metadata":{},"sourceType":"module"}